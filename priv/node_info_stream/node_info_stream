#!/usr/bin/python

#
# System info CPU/RAM/IO
#

import sys
import time
import psutil as ps
import json


# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()


# Process - actor
#  line - recieve message from world
#  send - send message to world
#  log  -  logging anything


def main(node, t):
    """
        t - time interval in secs
    """

    line = read()
    log("get message: " + line)

    while 1:

        log("tick..")

        # nodes
        resp = get_node_stat(node)
        send(resp)

        # ppols
        for i in get_ppool_stat(node):
            send(i)

        # log("message send: {}".format(resp))

        time.sleep(int(t))


def get_ppool_stat(node):

    ppool = {}
    stats = []
    for proc in ps.process_iter():
        pinfo = proc.as_dict(attrs=["pid", "name", "cmdline",
                                    "cpu_percent", "memory_percent"])

        if pinfo["cmdline"] is not None:
            if pinfo["cmdline"][1:3] == ["run", "--rm"]:

                # get identity group
                if "GROUP=" in pinfo["cmdline"][12]:
                    pname = pinfo["cmdline"][12][6:]
                else:
                    # not group identity -> get image name
                    pname = pinfo["cmdline"][13]

                cnt, pp, mp = ppool.get(pname,
                                        [0, pinfo["cpu_percent"],
                                         pinfo["memory_percent"]])

                ppool[pname] = [cnt + 1, pp + pinfo["cpu_percent"],
                                mp + pinfo["memory_percent"]]

    _trace = '{{"tag":"ppool_{}", "values":{}, "labels":{} }}'

    for k, v in ppool.items():

        ppool_stat = '{{"tag":"ppool_stat", "node": "{}", "name": "{}", \
                       "count":{}, "cpu_percent": {}, "ram_percent": {}, "_trace":{}\
                        }}'.format(
                            node,
                            k,
                            v[0],
                            v[1],
                            v[2],
                            _trace.format(k + node, [v[1], v[2], (v[1] + v[2])/2],
                                          json.dumps(["cpu", "ram", "mid"]))
                        )

        stats.append(ppool_stat)

    return stats


def get_node_stat(node):
    mem = ps.virtual_memory()
    disk = ps.disk_usage("/")
    cpu_p = ps.cpu_percent()

    _trace = '{{"tag":"node_{}", "values":{}, "labels":{} }}'

    node_stat = '{{"tag":"node_stat", "node": "{}", "cpu_count": {},"cpu_percent": {},\
                   "ram_count": {},"ram_percent": {},"disk_count": {},\
                   "disk_percent": {}, "net_count": {}, "_trace":{}\
                   }}'.format(
                  node,
                  ps.cpu_count(),
                  cpu_p,
                  mem[0]/(1024*1024),
                  mem[2],
                  disk[0]/(1024*1024),
                  disk[3],
                  len(ps.net_connections(kind="all")),
                  _trace.format(node, [cpu_p, mem[2], disk[3]],
                                       json.dumps(["cpu", "ram", "disk"]))
                   )

    return node_stat


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
