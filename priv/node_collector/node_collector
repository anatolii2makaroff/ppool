#!/usr/bin/python

#
# Collector node worker
#

import sys
import time
import json
import os
import sqlite3

# API


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()


# Process - actor
#  line - recieve message from world
#  send - send message to world
#  log  -  logging anything


def check_table(cur):

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                node_list(node text,
                                          active integer,
                                          date date_time,
                                          msg text
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_node_list ON node_list(node)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                ppool_list(node text,
                                           name text,
                                           date date_time,
                                           error integer,
                                           timeout integer,
                                           running integer,
                                           ok integer,
                                           elapsed REAL,
                                           nomore integer
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_ppool_list ON ppool_list(node, name)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                node_stat(node text,
                                          date date_time,
                                          cpu_count integer,
                                          cpu_percent real,
                                          ram_count integer,
                                          ram_percent real,
                                          disk_count integer,
                                          disk_percent real,
                                          net_count integer
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_node_stat ON node_stat(node)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                ppool_stat(node text,
                                           name text,
                                           date date_time,
                                           count integer,
                                           cpu_percent real,
                                           ram_percent real
                )
                """)

    cur.execute("""CREATE INDEX IF NOT EXISTS idx_ppool_stat ON ppool_stat(node, name)
                """)


def insert_node_info(args):

    """
     node_watch::%Node::nodedown::%Info
    """

    return """INSERT INTO node_list(node, active, date, msg)
                   VALUES ('{node}', {active}, CURRENT_TIMESTAMP,
                           '{msg}');""".format(node=args[1],
                                               active=(lambda x: x != "nodedown" and 1 or 0)(args[2]),
                                               msg=args[3])


def insert_ppool_info(args):

    """
    system::warning::nomore::node::ppoool
    system::drop1@127.0.0.1::rrd::0::0::0::18::156771.11111111112
    """

    if args[1] == "warning" and args[2] == "nomore":
        args = [0, args[3], args[4].strip(), 0, 0, 0, 0, 0, 1]
    else:
        args.append(0)

    return """INSERT INTO ppool_list(node, name, date, error, timeout, running, ok, elapsed, nomore)
                   VALUES ('{node}', '{name}', CURRENT_TIMESTAMP,
                           {error}, {timeout}, {running},
                           {ok}, {elapsed}, {nomore});""".format(node=args[1], name=args[2],
                                                       error=args[3], timeout=args[4],
                                                       running=args[5], ok=args[6],
                                                       elapsed=args[7], nomore=args[8])


def insert_node_stat(data):

    return """INSERT INTO node_stat(node, date, cpu_count, cpu_percent,
                                         ram_count, ram_percent, disk_count,
                                         disk_percent, net_count)
                   VALUES ('{0}', CURRENT_TIMESTAMP, {1}, {2}, {3}, {4}, {5}, {6},
                           {7})""".format(data["node"], data["cpu_count"],
                                          data["cpu_percent"], data["ram_count"],
                                          data["ram_percent"], data["disk_count"],
                                          data["disk_percent"], data["net_count"])


def insert_ppool_stat(data):

    return """INSERT INTO ppool_stat(node, name, date, count,
                                         cpu_percent, ram_percent)
                   VALUES ('{0}', '{1}', CURRENT_TIMESTAMP,
                           {2}, {3}, {4})""".format(data["node"], data["name"],
                                                    data["count"], data["cpu_percent"],
                                                    data["ram_percent"])


def clear_last_rows(cur, t):
    cur.execute("DELETE FROM node_stat WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("DELETE FROM ppool_stat WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("DELETE FROM ppool_list WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("""DELETE FROM node_list WHERE date NOT IN
                 ( SELECT date FROM node_list ORDER BY date DESC LIMIT {});""".format(t*3))


def connect(p):
    return sqlite3.connect(p + '/node_collector.db')


def main(p, cnt, t):

    if not os.path.exists(p):
        os.makedirs(p)

    #  create dbs
    conn = connect(p)
    cur = conn.cursor()

    check_table(cur)
    conn.commit()
    conn.close()

    n = cnt
    tb = time.time()
    data_list = []

    while 1:

        line = sys.stdin.readline()
        if not line:
            break

        log("start working..")
        log("get message: " + line)

        if line.startswith("tag:node_watch::"):

            # simple line format

            args = line.split("::")
            data_list.append(insert_node_info(args))

            send("ok")

        elif line.startswith("system::"):

            # system msg

            args = line.split("::")

            # get stat by tick
            if args[1] not in ["error", "timeout"]:
                data_list.append(insert_ppool_info(args))

            send("ok")

        else:

            # json

            data = json.loads(line)

            if data["tag"] == "node_stat":
                data_list.append(insert_node_stat(data))

            elif data["tag"] == "ppool_stat":
                data_list.append(insert_ppool_stat(data))

            send(json.dumps(data))

        # clear last rows
        n -= 1
        if n == 0 or time.time() - tb > t:
            log("flush tables..")

            conn = connect(p)
            cur = conn.cursor()

            for i in data_list:
                cur.execute(i)
            conn.commit()

            clear_last_rows(cur, t)
            conn.commit()

            conn.close()

            tb = time.time()
            n = cnt
            data_list = []


if __name__ == "__main__":
    main(sys.argv[1], int(sys.argv[2]), int(sys.argv[3]))
